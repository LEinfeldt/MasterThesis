package com.example.apurva.welcome.Activities;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.PixelFormat;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Toast;

import com.example.apurva.welcome.Augmentations.MyGLRenderer;
import com.example.apurva.welcome.Augmentations.MyGLSurfaceView;
import com.example.apurva.welcome.Augmentations.PointOfInterests;
import com.example.apurva.welcome.DeviceUtils.LocationUpdate;
import com.example.apurva.welcome.R;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;

import org.json.JSONException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/*
The new Camera2 API was used with the Texture View
This Activity opens camera and calls the classes to add Point of Interests and Route guidance
 */
public class CameraActivity extends AppCompatActivity implements TextureView.SurfaceTextureListener, OnMapReadyCallback{

    //Texture View for holding the Camera
    private TextureView mTextureView;
    //GL View to create view for route guidance augmentation generated by OPENGL ES 2.0
    private MyGLSurfaceView glView;
    //Code for asking camera permission
    private static final int MY_PERMISSIONS_REQUEST_CAMERA = 0;
    //Handler for camera
    private HandlerThread mHandlerThread;
    private Handler mHandler;
    //Preview size of the camera
    private Size mPreviewSize;
    //builder to initiate camera capturing request
    private CaptureRequest.Builder mCaptureRequestBuilder;
    //ID for camera(front/back)
    private String mCameraId;
    //Camera
    private CameraDevice mCameraDevice;
    //To store the orientation of the device(Landscape/Portrait)
    private static SparseIntArray ORIENTATIONS = new SparseIntArray();
    private static final String TAG = "CameraActivity";

    //Properties of the camera
    public static float focalLength;
    public static float cameraWidth;
    public static float cameraHeight;

    //Variables for showing the small Google map
    GoogleMap mGoogleMap;
    SupportMapFragment mFragment;
    LatLng latLng;
    LocationUpdate locationUpdate;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        //Create a texture View
        mTextureView = new TextureView(this);
        mTextureView.setSurfaceTextureListener(this);

        //create instance for MyglsurfaceView class
        try {
            glView = new MyGLSurfaceView(this);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        //gl view settings
        glView.setZOrderOnTop(true);
        glView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
        glView.getHolder().setFormat(PixelFormat.TRANSLUCENT);
        glView.setRenderer(new MyGLRenderer(this));
        //render only when there is a change in data
        glView.setRenderMode(MyGLSurfaceView.RENDERMODE_WHEN_DIRTY);
        //View of the activity
        setContentView(R.layout.activity_camera);
        //add texture view
        addContentView(mTextureView, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        //transparency of the texture View
        mTextureView.setAlpha(1f);
        //add POI View Class
        PointOfInterests pointOfInterests = null;
        try {
            pointOfInterests = new PointOfInterests(this);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        addContentView(pointOfInterests, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        // add glsurfaceView
        addContentView(glView, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        //initialize the fragment of google maps for showing location along with the camera view
        mFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
        mFragment.getMapAsync(this);
        getSupportFragmentManager().beginTransaction().show(mFragment).commit();
        //sends the camera view back so the map is displayed
        sendViewToBack(mTextureView);
        //current location class
        locationUpdate = new LocationUpdate(this);
        latLng = new LatLng(locationUpdate.currentPosition.getCoordinate().getLatitude(),
                locationUpdate.currentPosition.getCoordinate().getLongitude());
    }

    private static void sendViewToBack(final View child) {
        final ViewGroup parent = (ViewGroup)child.getParent();
        if (null != parent) {
            parent.removeView(child);
            parent.addView(child, 0);
        }
    }

    @Override
    public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int width, int height) {
        //Setting up Camera
        Toast.makeText(this, "Texture View Available", Toast.LENGTH_SHORT).show();
        setUpCamera(width, height);
        connectCamera();
    }

    @Override
    public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i1) {

    }

    @Override
    public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
        return false;
    }

    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {

    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        //displaying the current location on google map
        //TODO: Replace it with skobbeler maps though it is a little complicated, That's why used googleMaps
        mGoogleMap = googleMap;
        if (ContextCompat.checkSelfPermission(this,
                android.Manifest.permission.ACCESS_FINE_LOCATION)
                == PackageManager.PERMISSION_GRANTED) {
            mGoogleMap.setMyLocationEnabled(true);

            //Centers the map to the current location

            CameraPosition cameraPosition = new CameraPosition.Builder()
                    .target(latLng).zoom(16).build();

            mGoogleMap.animateCamera(CameraUpdateFactory
                    .newCameraPosition(cameraPosition));
        }

        mGoogleMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {
            @Override
            public void onMapClick(LatLng latLng) {
                //if the users clicks on the Map, mapActivity is resumed
                finish();
            }
        });

    }



    private static class CompareSizeByArea implements Comparator<Size> {
        //Compare size for defining the resolution of the camera
        @Override
        public int compare(Size lhs, Size rhs){
            return Long.signum((long) lhs.getWidth()*lhs.getHeight()/
                    (long) rhs.getWidth()*rhs.getHeight());
        }

    }

    @Override
    public void onResume() {
        //Sets up the dimension of the Texture View
        super.onResume();
        startBackgroundThread();

        if (mTextureView.isAvailable()) {
            setUpCamera(mTextureView.getWidth(), mTextureView.getHeight());
            connectCamera();
        } else {
            mTextureView.setSurfaceTextureListener(this);
        }
        glView.onResume();

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults){
        //Permission to access Camera Services
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if(requestCode == MY_PERMISSIONS_REQUEST_CAMERA){
            if(grantResults[0] != PackageManager.PERMISSION_GRANTED){
                Toast.makeText(this, "AR view will not run without camera services", Toast.LENGTH_SHORT).show();
            }
        }

    }

    @Override
    public void onPause() {
        stopBackgroundThread();
        closeCamera();
        super.onPause();
        glView.onPause();
    }

    private CameraDevice.StateCallback mCameraStateCallback = new CameraDevice.StateCallback(){
        //Connect Camera
        @Override
        public void onOpened(CameraDevice camera){

            mCameraDevice = camera;
            //Toast.makeText(getApplicationContext(), "Camera is connected", Toast.LENGTH_SHORT).show();
            startPreview();
        }

        @Override
        public void onError(CameraDevice camera, int error){
            camera.close();
            mCameraDevice = null;
        }

        @Override
        public void onDisconnected(CameraDevice camera){
            camera.close();
            mCameraDevice = null;

        }

        @Override
        public void onClosed(CameraDevice camera) {
            // Keep the thread alive until the camera is closed.
            stopBackgroundThread();
        }


    };

    private void startPreview(){
        //Opens the Camera
        SurfaceTexture surfaceTexture = mTextureView.getSurfaceTexture();
        surfaceTexture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
        Surface previewSurface = new Surface(surfaceTexture);

        try {
            mCaptureRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            if (mTextureView.isAvailable()) {
                mCaptureRequestBuilder.addTarget(previewSurface);
                mCameraDevice.createCaptureSession(Arrays.asList(previewSurface),
                        new CameraCaptureSession.StateCallback() {

                            @Override
                            public void onConfigured(CameraCaptureSession cameraCaptureSession) {
                                try {
                                    cameraCaptureSession.setRepeatingRequest(mCaptureRequestBuilder.build(), null, mHandler);
                                } catch (CameraAccessException e) {
                                    e.printStackTrace();
                                }

                            }

                            @Override
                            public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
                                Toast.makeText(getApplicationContext(), "Unable to setup Camera Preview", Toast.LENGTH_SHORT).show();

                            }
                        }, null);
            }
        }
        catch (CameraAccessException e) {
            e.printStackTrace();
        }

    }


    private void closeCamera(){
        if(mCameraDevice!=null){
            mCameraDevice.close();
            mCameraDevice = null;
        }
    }



    private void setUpCamera(int width, int height){
        CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);

        try{
            for(String cameraId: cameraManager.getCameraIdList()){
                CameraCharacteristics cameraCharacteristics = cameraManager.getCameraCharacteristics(cameraId);

                if(cameraCharacteristics.get(CameraCharacteristics.LENS_FACING) == cameraCharacteristics.LENS_FACING_FRONT){
                    continue;
                }

                StreamConfigurationMap map = cameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                //calculate the properties of the camera for further use
                focalLength = cameraCharacteristics.get(CameraCharacteristics.LENS_INFO_AVAILABLE_FOCAL_LENGTHS)[0];
                cameraWidth = cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_PHYSICAL_SIZE).getWidth();
                cameraHeight = cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_PHYSICAL_SIZE).getHeight();
                int deviceOrientation = getWindowManager().getDefaultDisplay().getRotation();
                int totalRotation = deviceRotation(cameraCharacteristics, deviceOrientation);
                boolean swapRotation = totalRotation == 90 || totalRotation == 270;
                int rotationWidth = width;
                int rotationHeight = height;

                //TODO: Handle the rotation of the phone
                if(swapRotation){
                    rotationWidth = height;
                    rotationHeight = width;
                }
                mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class), rotationWidth, rotationHeight);

                mCameraId = cameraId;
                return;
            }
        }
        catch(CameraAccessException e){
            e.printStackTrace();
        }


    }

    private void connectCamera(){
        CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
        try{
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
                if(ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED){
                    cameraManager.openCamera(mCameraId, mCameraStateCallback, mHandler);
                }
                else{
                    if(shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)){
                        Toast.makeText(this, "Augmented Reality View requires access to camera", Toast.LENGTH_SHORT).show();
                    }
                    requestPermissions(new String[] {Manifest.permission.CAMERA}, MY_PERMISSIONS_REQUEST_CAMERA);
                }
            }
        }
        catch(CameraAccessException e){
            e.printStackTrace();
        }

    }

    static{
        ORIENTATIONS.append(Surface.ROTATION_0, 0);
        ORIENTATIONS.append(Surface.ROTATION_90, 90);
        ORIENTATIONS.append(Surface.ROTATION_180, 180);
        ORIENTATIONS.append(Surface.ROTATION_270, 270);
    }

    private static int deviceRotation(CameraCharacteristics cameraCharacteristics, int rotation){
        int sensorOrienation = cameraCharacteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
        rotation = ORIENTATIONS.get(rotation);
        return (sensorOrienation + rotation +360) % 360;

    }

    private void startBackgroundThread(){
        //starts the background thread
        mHandlerThread = new HandlerThread("ARImage");
        mHandlerThread.start();
        mHandler = new Handler(mHandlerThread.getLooper());
    }

    private void stopBackgroundThread(){
        //stops the background thread
        mHandlerThread.quitSafely();
        try {
            mHandlerThread.join();
            mHandlerThread = null;
            mHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static Size chooseOptimalSize(Size[] choices, int width, int height){
        //choosing resolution for the camera
        List<Size> bigEnough = new ArrayList<Size>();
        for(Size option:choices){
            if(option.getHeight() == option.getWidth() * height/width &&
                    option.getWidth() >=  width && option.getHeight() >= height){
                bigEnough.add(option);
            }
        }

        if(bigEnough.size()> 0){
            return Collections.min(bigEnough, new CompareSizeByArea());
        }
        else{
            return choices[0];
        }
    }



}
